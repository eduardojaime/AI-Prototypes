const configs = require("../configs");
const fs = require("fs");
const { Configuration, OpenAIApi } = require("openai");
const configuration = new Configuration({
  organization: configs.OpenAI.OrganizationId,
  apiKey: configs.OpenAI.APIKey,
});
const openai = new OpenAIApi(configuration);
const axios = require("axios");

exports.GenerateScript = async function (UserPrompt, IsShort) {
  // Remove the default timeout setting
  axios.defaults.timeout = 0; // Set timeout to 0 for no timeout
  let ChatPrompt = `Generate a story about:
  
  ${UserPrompt}

  Following the rules provided in your system prompt. Make sure to output as a table, add details to the story to make it long, somber and scary. Table must contain at least 12 rows and the image prompt must be written in such generic way that it does not contain details from the story.`;
  let selectedSystem = IsShort
    ? "extensions/prompts/system-shorts.txt"
    : "extensions/prompts/system-long.txt";

  console.log("Using System Prompt: " + selectedSystem);
  let SystemPrompt = fs.readFileSync(selectedSystem, "utf-8");
  // console.log(SystemPrompt);
  const chatCompletion = await openai.createChatCompletion({
    model: configs.OpenAI.Model,
    messages: [
      { role: "system", content: SystemPrompt },
      { role: "user", content: ChatPrompt },
    ],
  });
  // console.log(chatCompletion.data.choices[0].message.content);
  return chatCompletion.data.choices[0].message.content;
};

exports.GenerateMetadata = async function (
  Notes,
  Script,
  Keywords,
  SeriesName,
  Language
) {
  // Remove the default timeout setting
  axios.defaults.timeout = 0; // Set timeout to 0 for no timeout
  let ChatPrompt = `
    Take a look at the following notes:
    ${Notes}

    And take a look at the following story:
    ${Script}
    
    And give me a description in ${Language} that includes the title, description, a short note indicating this is a fictitious story generated by AI, and a space separated list of 5 relevant tags for this video to get more views on YouTube, make sure to prefix all tags with a '#'.

    Make sure to include "${Keywords}" in the title, description, note and tags. Make the output at least 3000 characters long.
    
    Follow the following format strictly:
    
    <TITLE>

    <DESCRIPTION PART 1: 2-3 SENTENCES WITH A STRONG INTRO TO THE STORY>
    
    <DESCRIPTION PART 2: DETAILED OUTLINE OF THE STORY>
    
    <NOTE>
    
    <TAGS>
    
    Additionally, recommend 10 interesting titles in ${Language} that include '| ${SeriesName}' in the title. Follow this format: '<QUESTION?> (<INTERESTING SENTENCE>) | ${SeriesName}'`;

  let SystemPrompt = fs.readFileSync(
    "extensions/prompts/system-long.txt",
    "utf-8"
  );
  // console.log(SystemPrompt);
  const chatCompletion = await openai.createChatCompletion({
    model: configs.OpenAI.Model,
    messages: [
      { role: "system", content: SystemPrompt },
      { role: "user", content: ChatPrompt },
    ],
  });
  // console.log(chatCompletion.data.choices[0].message.content);
  return chatCompletion.data.choices[0].message.content;
};
